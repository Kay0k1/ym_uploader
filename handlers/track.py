from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from states import AddTrackState
from downloader import set_mp3_metadata, download_audio
import os
import uploader
import auth_utils
import asyncio
import logging

router = Router()


@router.callback_query(F.data == "add_track")
async def add_track_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("üéß –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ:")
    await state.set_state(AddTrackState.waiting_query)


@router.message(AddTrackState.waiting_query)
async def process_query(message: Message, state: FSMContext):
    query = message.text.strip()

    await message.answer("‚è¨ –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    try:
        mp3_path, cover_url = await asyncio.to_thread(download_audio, query)
        await state.update_data(
            mp3_path=mp3_path,
            original_query=query,
            cover_url=cover_url,
        )
    except Exception as e:
        logging.exception("download error")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        await state.clear()
        return

    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ, –∫–∞–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ:")
    await state.set_state(AddTrackState.waiting_title)


@router.message(AddTrackState.waiting_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer(
        "üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –¥–ª—è —Ç—Ä–µ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–∞ YouTube", callback_data="cover_youtube")],
            [InlineKeyboardButton(text="–ë–µ–∑ –æ–±–ª–æ–∂–∫–∏", callback_data="cover_none")],
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é", callback_data="cover_custom")]
        ])
    )
    await state.set_state(AddTrackState.waiting_cover_choice)


@router.callback_query(F.data.startswith("cover_"))
async def cover_choice_handler(call: CallbackQuery, state: FSMContext):
    choice = call.data.split("_")[1]
    await state.update_data(cover_type=choice)

    if choice == "custom":
        await call.message.edit_text("üìé –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG/PNG), –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±–ª–æ–∂–∫–æ–π –¥–ª—è —Ç—Ä–µ–∫–∞:")
        await state.set_state(AddTrackState.waiting_cover_file)
    else:
        await finalize_upload(call.message, call.from_user.id, state)


@router.message(AddTrackState.waiting_cover_file, F.photo)
async def process_cover_file(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    file_path = f"/tmp/{photo.file_id}.jpg"
    await message.bot.download_file(file_info.file_path, destination=file_path)

    await state.update_data(cover_path=file_path)
    await finalize_upload(message, message.from_user.id, state)


async def finalize_upload(reply_target: Message, user_id: int, state: FSMContext):
    data = await state.get_data()
    user = await auth_utils.get_user(user_id)

    await reply_target.answer("üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É...")

    try:
        await asyncio.to_thread(
            set_mp3_metadata,
            data["mp3_path"],
            data["title"],
            cover_path=data.get("cover_path") if data.get("cover_type") == "custom" else None,
            cover_url=data.get("cover_url") if data.get("cover_type") == "youtube" else None
        )

        await asyncio.to_thread(
            uploader.upload_track,
            token=user["token"],
            playlist_kind=user["playlist_kind"],
            file_path=data["mp3_path"]
        )

    except Exception as e:
        logging.exception("upload error")
        await reply_target.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {e}")
        await state.clear()
        return

    os.remove(data["mp3_path"])
    cover_path = data.get("cover_path")
    if cover_path and os.path.exists(cover_path):
        os.remove(cover_path)

    await reply_target.answer(
        f"‚úÖ –¢—Ä–µ–∫ <b>{data['title']}</b> –∑–∞–≥—Ä—É–∂–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç—Ä–µ–∫", callback_data="add_track")]
        ]),
        parse_mode="HTML"
    )
    await state.clear()
