from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import AuthState
import auth_utils
from texts.texts import reg_text, auth_text
from keyboards.menu_kb import back_to_menu_keyboard
from keyboards.auth_kb import get_auth_keyboard

router = Router()

@router.message(F.text == "/auth")
async def start_auth(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AuthState.waiting_token:
        return
    kb = await get_auth_keyboard()
    await message.answer(
        reg_text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(AuthState.waiting_token)


@router.callback_query(F.data == "auth")
async def auth_callback(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AuthState.waiting_token:
        await call.answer()
        return
    await state.set_state(AuthState.waiting_token)
    
    await call.message.edit_text(auth_text, parse_mode="HTML")
    await call.answer()



@router.message(AuthState.waiting_token)
async def receive_token(message: Message, state: FSMContext):
    token = message.text.strip()
    if not token.startswith("y0_"):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")
        await state.clear()
        return
    await state.update_data(token=token)
    await message.answer("üéµ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Ç—Ä–µ–∫–∏")
    await state.set_state(AuthState.waiting_playlist)


@router.message(AuthState.waiting_playlist)
async def receive_playlist(message: Message, state: FSMContext):
    playlist_link = message.text.strip()
    data = await state.get_data()
    try:
        kind = await auth_utils.authenticate(message.from_user.id, data["token"], playlist_link)
        kb = await back_to_menu_keyboard()
        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –¢–æ–∫–µ–Ω –∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
            f"<b>kind:</b> <code>{kind}</code>\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç—Ä–µ–∫–∏ üëá",
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}\n –æ–±—Ä–∞—Ç–∏—Å—å –∫ @avtilomm –∑–∞ –ø–æ–º–æ—â—å—é",
            disable_web_page_preview=True
        )
    await state.clear()